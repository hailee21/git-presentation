형상관리 툴 CVS, SVN, 그리고 Git비교

많은 분이 개발하다가, 실수로 소스를 삭제하거나, 아니면 수정하기 전으로 돌아가야 되는 경우가  발생할 합니다. 그러나, 형상관리 툴에서 소스의 버전관리가 되어 있다면, 그냥 마지막 소스 버전으로 복원하여 우리는 개발을 계속 진행 할 수 있습니다. 이렇게 유용한 형상관리 툴 없이 개발한다는 것은 상상하기 힘들 것 입니다. 그러나, 프로젝트나 유지보수를 하다 보면, 단순히 버전관리 뿐만 아니라, 다른 사람들이 변경을 막는 잠금 기능이나, 파일명을 변경하는 기능도 우리는 필요 합니다. 또한, 한 소스를 가지고 새로운 기능을 추가하는 팀과 이전의 버그를 수정하는 팀이 동시에 있을 수 있습니다. 그리고, 이 두 작업이 끝나면 다시 병합해야 하는 경우도 생깁니다. 이러한 요구는 당연히 형상관리 툴의 발전도 가져왔습니다. 우리가 귀에 자주 들어온 CVS, SVN, 그리고, Git 에 잘 정리된 기사가 있어 소개 합니다.

Version control(버전 제어 또한, 파괴 제어 또는 개정 제어)는 큰 프로젝트에서  프로그래머들, 문서 작성자들, 또는 프로젝트 관리자들이 프로젝트에 다른 각도에서 방해하여, 제어에서 벗어나는 것을 각각의 사람들간에 충돌과 되돌릴 수 없는 피해 없이 방지합니다.

형상관리는 소스의 변화를 끊임없이 관리하는 것을 말합니다. 최근에는 단순히 소스 뿐만 아니라,이미지나 바이너리나 심지어 OS까지 버전관리를 합니다. 이러한 소스 관리의 가장 큰 장점은 실수로부터 안전하게 프로젝트를 보호할 수 있다는 것 입니다.

GNU license로 공개되었으며, 사용자가 작업할 코드를 “check out”하고, 변경된 코드를 “check in” 하는 시스템입니다.


처음에는, CVS는 오로지 최종 버전의 코드만 작업이 되고 수정을 허용함으로써, 두 프로그래머간의 충돌을 방지하였습니다. 먼저 온 것이 먼저 처리되는 시스템으로, 사용자는 변경을 빨리 적용하여, 다른 사용자들이 변경 적용으로 선수를 치는 것을 막아야 했습니다.

CVS 서버는 유닉스종류 시스템에서 구동이 되고, client software 다양한 운영체제에서 구동이 됩니다. 가장 안정된 버전 제어 시스템으로써, 오랫동안 개발되어 왔고,  그 동안 새로운 기능을 요청 받지를 않았습니다.

장점 :
     오랫동안 사용이 되어 왔고, 안정된 것으로 고려 됩니다.

단점 :
     파일 이동이나 이름변경은 버전 변경이 미발생
     파일 Symbolic 링크에 대한 보안 문제
     소스 충돌에 대한 세부 운영에 대한 지원 및 안내 미지원
     버전 분기가 힘들고, 장기간 분기된 버전 운영에 대해서 설계되지 않았음


안정된 버전 제어 시스템이라는 것 빼고는 장점이 없어 보입니다 그렇지만, 홀로 개발한다면 CVS처럼 단순히 최종버전만을 관리하는 툴이 괜찮아 보입니다.

SVN은 CVS와 높은 호환성을 유지하면서, 약간의 버그를 수정하면서, 대체 시스템으로 개발되었습니다.

database 내에 결함이 다시 다른 결함으로 인한 또 다른 충돌을 방지하기 위해서,  SVN은 세부적인 조작을 선택하였습니다. 소스에 모든 변경이 적용이 되거나, 아무것도 적용이 안 됩니다. 이것은 부분적인 변화가 원본 소스를 파괴하지 않을 것이라는 의미합니다.


CVS의 분기 버전의 댓가는 값 비싸고, 분기 버전 자체는 프로젝트에서 장기운영에 정말로 도움이 되지 않는 반면에, SVN은 이를 허용하고, 이 자체는 대규모의 분기된 프로젝트에  더 낫은 도움을 줍니다.  

장점:
    CVS를 기초한 좀 더 새로운 시스템
    세부적인 조작이 가능
    효율적인 분기 버전 운영
    SVN를 지원하는 많은 IDE용 플러그인 툴
    peer-to-peer 모델을 사용하지 않음

단점:
    여전히 파일과 디렉토리 변경에 관련된 버그들
    불충분한 저장소 관리 명령어
    더 느려진 상대적인 속도


Git의 원 개념은 CVS에 관행과 관례를 공개적으로 개선하면서, 보다 빠른 분산된 버전 제어 시스템을 만드는 것이었습니다. 이것은 주로 리눅스용으로 개발이 되고 있고, 리눅스 상에서 가장 빠른 속도를 보입니다. 또한, 유닉스종류의 시스템에서 동작할 것고, Git의 고유 port가 Windows용 Git 설치프로그램인 msysgit로 이용이 가능합니다.
중앙 집중화된 서버가 없기 때문에, Git는 자체를 개발자 개인 프로젝트나 작은 팀에게 부여하지 않습니다.  저장소가 없는 컴퓨터를 사용할 때에는, 코드가 항상 이용 가능하지 않을 수 있습니다. 이 문제에 대한 차선책은 존재하고, 일부는 Git의 개선된 속도를 이 번거로움에 대한 적절한 교환으로  봅니다.
Git는 또한 사용자 이력 시스템을 탐색할 수 있는 다양한 툴을 갖추고 있습니다. 각각의 소스본은 이력 전체를 포함하고 있고, 인터넷 연결이 없을 때 유용합니다.



장점:
    CVS/SVN를 싫어하는 사람들에게 훌룡함
    조작 속도의 큰 개선
    분기 버전의 효율적인 운영
    오프라인에서도 전체 이력이 이용 가능함
    분산된 peer-to-peer model

단점:
   SVN 사용자들이 배우기 어려움
   개별 개발자들에게는 적절치 않음
   리눅스에 비해 제한된 Windows 지원

