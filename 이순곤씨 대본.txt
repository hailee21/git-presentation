●conflict 충돌
Ex) 두 사람이 5버전을 가져간 상황에서 A가 commit & push를 하면 6버전 

여기서 B가 다시 commit & push 를 하면 Conflict 상황
-> 덮어쓰기 해버리면 데이터가 날아가므로 이를 방지하기 위해서 conflict 발생

덮어쓰기 해버리면 데이터가 날아가니까. 
이때 충돌을 내지 않도록 A가 수정한 부분을 확인하고 B가 가진 프로젝트에서 추가를 하든지, 
다시 6버전을 받아서 내가 수정한 부분을 적용을 시키든지 해야한다

●merge 병합
ver3
ver2
ver1

하람이가 3을 가져가서 작업한다.
현주가 3을 가져가서 작업한다.
하람이가 ver4를 올렸다.
현주가 작업하던것을 commit and push 하려고 하니 충돌이 일어나서
푸쉬를 거절했다.

현주는 merge를 해서
merge: 지금 내가 작업하고 있는 프로젝트와 git에 올라와있는 최신 버전과 비교(fetch)하고, 병합(merge)한다.


●issue
지금은 관리자 페이지 주소를 모르니까 사람들이 접근하지 못하는데 
관리자페이지 주소를 알아도 일반 사용자가 접근하지 못하게 확인과정을 거칠 때. 이슈를 남긴다. 
어느 커밋때 어느 이슈가 있다고 남긴다. 
이슈 정리하는 사람이 이슈 처리를 하면, 어느 커밋에서 추가됐다고 나온다. 
검색어에 특수문자를 넣으면 깨진다. - 당장은 특수문자를 안 쓰면 되지만, 나중에 처리해야 할 일. 
입력이 안된다는 이슈가 아니라 에러다. 당장 해결해야 할 문제지, 나중으로 미룰 일이 아니다.

●이슈관리
프로젝트 진행시 나오는 모든 이슈, 고객 미팅, 개발 시 필요한 준비사항등 프로젝트에서 필요한 모든 내용을 우리는 이슈관리를 통해서 관리한다.
이슈에 comment가 달리면
collaborators한 사람들에게 이메일로 해당 커밋에 대한 comment가 전송된다

(Slack과 같은 별도의 채팅 도구를 사용하지 않더라도, 이메일을 통해 실시간 이슈 변경 사항이 공유가 되니, 아직까지는 크게 불편함 없이 사용하고 있다. 
오히려 채팅도구를 이용해서 실시간으로 메시지가 계속 전달되고, 확인하고 답변해야 할 필요가 없어서 업무에 조금 더 집중할 수 있는것 같다.)

↓ 예시 ↓
- meeting : 고객/사용자와의 업무협의 미팅이 있는 경우 meeting으로 이슈를 등록하고, 해당 미팅시 필요한 내용/ 확인해야 할 사항/요청해야 할 사항 등을 미리 정리해 놓는다. 실제 미팅시 해당 이슈를 열어놓고 관련 정보를 기록하게 된다.

- todo : 한주단위로 각자 해야 할 task을 등록한다. task 작성시 add a task list 버튼을 이용해서 task 목록을 작성하면, 이슈 리스트 화면에서 몇개의 task가 있고, 몇개의 task가 완료되었는지 직관적으로 확인할 수 있다.

- development : 개발를 하기 위해서 사전에 완료되어야 하는 task 목록을 작성한다. 해당 task가 완료가 되어야 개발자가 실제 개발에 착수할 수 있다. 또한 개발시 주의해야 할 업무 내역과 비즈니스 로직을 정리하여 개발자가 개발시 참조하도록 한다.

- bug : 개발자가 Projects 탭에서 개발목록을 개발완료로 이동키셔 놓으면 해당 개발목록에 대해서 테스트를 진행하고, 테스트에서 나온 bug 내용을 작성하게 된다.