◆ 개념
git
깃은 프로젝트의 어떤 부분도 겹쳐쓰지 않게 프로젝트의 수정/변경/업데이트 등을 관리하는 버전관리 소프트웨어이다.

깃을 사용해야 하는 이유?
여러 사람이 함께 하는 프로젝트에서 동시에 같은 웹사이트에서 페이지를 업데이트 하고 있을 때,
한 사람이 무언가를 변경하고 저장한 다음 웹사이트에 그것을 업로드한다. 여기까지만해도 너무 좋은 소프트웨어지만,
만약 두 사람이 동시에 같은 페이지를 수정하고 있다면?
누군가의 작업은 겹쳐쓰여질 것이고 지워질 것이다. - 파일 버전 관리가 안되는 거다.
깃과같은 버전관리 앱은 그런 일을 방지한다. 버전을 관리하는거다.
두 사람이 같은 페이지에 각자의 수정사항을 각각 업로드 할 수 있고, 깃은 두개의 복사본을 저장한다.
나중에 그대로 어떤 작업도 잃어버리지 않고 변경사항들을 병합할 수도 있다.

github
깃허브는 두 가지 방식으로 깃을 더 편리하게 해준다.
첫번째로 깃허브 소프트웨어를 다운로드 하면, 로컬에서 내가 작업하고 있는 프로젝트를 관리할 수 있게 하는 비주얼 인터페이스를 제공한다.
두번째는 Github.com에 계정을 생성하면 웹에서 프로젝트를 버전관리 할 수 있으며, 평가측정 등의 소셜 네트워크 기능을 사용할 수 있다.
다른 깃허브 사용자의 프로젝트를 둘러볼 수 있고,-모든 사용자가 공유할 수 있는 public.(sns처럼 다른 사람들이 올린 코드들을 볼 수가 있고, 구독/공유/좋아요 가능하다.)
그것들을 변경하거나 배우기 위해 자신만의 복사본을 다운로드 할 수 도 있다.(Fork-공유/스크랩)
다른 사용자도 당신의 공개 프로젝트에 대해 복사/구독 등.. 할 수 있으며 에러를 발견해서 해결책을 제안 할 수도 있다.
(코멘트)
어느 경우든, 깃이 모든 변경사항에 대한 "스냅샷"을 저장하기 때문에 어떤 데이터도 잃어버리지 않는다.

◆ 기본용어

커맨드 라인 (Command Line): 깃 명령어를 입력할 때 사용하는 컴퓨터 프로그램. 맥에선 터미널이라고 한다. PC에선 기본적인 프로그램이 아니어서 처음엔 깃을 다운로드 해야 한다. 명령 프롬프트로 알려진 텍스트 기반 명령어를 입려한다.

저장소(Repository): 프로젝트가 살아있는 디렉토리나 저장공간. ("repo"로 줄여서 사용하기도..) Repository는 개인의 컴퓨터 안의 로컬 폴더가 될 수도 있고, 깃허브나 다른 온라인 호스트의 저장공간이 될 수도 있다. 저장소 안에 코드 화일, 텍스트 화일, 이미지 화일을 저장하고, 이름붙일 수 있다.

버전관리(Version Control): 깃의 기본적인 목적. 본래 우리는 파일을 저장할 때 이전 화일 위에 겹쳐 쓰거나 여러 버전으로 나누어 저장을 하게 된다. 그런데 깃을 사용하면 그럴 필요가 없다. 프로젝트 히스토리의 모든 시점의 "스냅샷"을 유지하므로, 결코 잃어버리거나 겹쳐쓰지 않고 버전관리를 할 수 있다.

커밋(Commit): 깃에게 파워를 주는 명령이다. 커밋하면, 그 시점에서 "스냅샷"을 찍어, 프로젝트를 이전의 어떠한 상태로든 재평가하거나 복원할 수 있는 체크포인트를 가질 수 있다.

브랜치(Branch): 여러 명이 하나의 프로젝트에서 깃 없이 작업한다면, 혼란을 야기할 것이다. 일반적으로, 작업자들은 메인 프로젝트의 브랜치를 따와서 (branch off), 자신이 변경하고 싶은 자신만의 버전을 만든다.
작업을 끝낸 후, 프로젝트의 메인 디렉토리인 "master"에 브랜치를 다시 "Merge"한다.
